# PowerShell Lint and Test Workflow (2025 Enhanced)
# Comprehensive PowerShell testing with modern GitHub Actions practices
name: PowerShell CI/CD Pipeline

on:
  push:
    branches: [ "main", "develop" ]
    paths:
      - '**/*.ps1'
      - '**/*.psm1'
      - '**/*.psd1'
      - '.github/workflows/ps-lint.yml'
  pull_request:
    branches: [ "main" ]
    paths:
      - '**/*.ps1'
      - '**/*.psm1'
      - '**/*.psd1'
      - '.github/workflows/ps-lint.yml'
  workflow_dispatch:
    inputs:
      run_tests:
        description: 'Run additional tests'
        required: false
        default: 'true'
        type: boolean

env:
  POWERSHELL_TELEMETRY_OPTOUT: 1

permissions:
  contents: read
  security-events: write
  actions: read
  id-token: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint:
    name: PowerShell Lint & Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    outputs:
      ps-files-changed: ${{ steps.changes.outputs.powershell }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Detect PowerShell file changes
        uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            powershell:
              - '**/*.ps1'
              - '**/*.psm1'
              - '**/*.psd1'
              
      - name: Cache PowerShell modules
        uses: actions/cache@v3
        if: steps.changes.outputs.powershell == 'true'
        with:
          path: ~/.local/share/powershell/Modules
          key: powershell-modules-${{ runner.os }}-${{ hashFiles('**/RequiredModules.psd1', '**/*.psd1') }}
          restore-keys: |
            powershell-modules-${{ runner.os }}-
            
      - name: Setup PowerShell
        uses: microsoft/powershell@v1
        if: steps.changes.outputs.powershell == 'true'
        
      - name: Install PSScriptAnalyzer
        if: steps.changes.outputs.powershell == 'true'
        shell: pwsh
        run: |
          Set-PSRepository -Name PSGallery -InstallationPolicy Trusted
          Install-Module -Name PSScriptAnalyzer -Force -Scope CurrentUser
          
      - name: Run PSScriptAnalyzer (Less Strict)
        if: steps.changes.outputs.powershell == 'true'
        shell: pwsh
        run: |
          # Create a less strict PSScriptAnalyzer settings file
          $settings = @{
              Rules = @{
                  # Only include Error-level rules, exclude Information and Warning rules
                  PSUseCompatibleCmdlets = @{
                      compatibility = @(
                          'desktop-5.1.14393.206-windows',
                          'core-6.1.0-windows',
                          'core-6.1.0-linux'
                      )
                  }
              }
              # Set severity to only fail on Error level issues
              Severity = @('Error')
              # Exclude common informational rules that are too strict
              ExcludeRules = @(
                  'PSUseShouldProcessForStateChangingFunctions',
                  'PSAvoidUsingPlainTextForPassword',
                  'PSAvoidUsingConvertToSecureStringWithPlainText',
                  'PSUseSingularNouns',
                  'PSUseApprovedVerbs',
                  'PSAvoidUsingPositionalParameters'
              )
          }
          
          # Convert to JSON and save
          $settings | ConvertTo-Json -Depth 3 | Set-Content -Path 'PSScriptAnalyzerSettings.psd1' -Encoding UTF8
          
          # Find all PowerShell files
          $psFiles = Get-ChildItem -Recurse -Include '*.ps1', '*.psm1', '*.psd1' | Where-Object { $_.FullName -notlike '*/.git/*' }
          
          if ($psFiles.Count -eq 0) {
              Write-Host "No PowerShell files found to analyze"
              exit 0
          }
          
          Write-Host "Analyzing $($psFiles.Count) PowerShell files with less strict rules (errors only)..."
          
          $allIssues = @()
          $errorCount = 0
          $warningCount = 0
          
          foreach ($file in $psFiles) {
              Write-Host "Analyzing: $($file.FullName)"
              $issues = Invoke-ScriptAnalyzer -Path $file.FullName -Settings './PSScriptAnalyzerSettings.psd1' -Verbose
              
              if ($issues) {
                  $allIssues += $issues
                  $errors = $issues | Where-Object { $_.Severity -eq 'Error' }
                  $warnings = $issues | Where-Object { $_.Severity -eq 'Warning' }
                  
                  $errorCount += $errors.Count
                  $warningCount += $warnings.Count
                  
                  foreach ($issue in $issues) {
                      $icon = switch ($issue.Severity) {
                          'Error' { '❌' }
                          'Warning' { '⚠️' }
                          'Information' { 'ℹ️' }
                      }
                      Write-Host "  $icon [$($issue.Severity)] $($issue.RuleName): $($issue.Message) (Line: $($issue.Line))"
                  }
              }
          }
          
          Write-Host ""
          Write-Host "=== PSScriptAnalyzer Summary ==="
          Write-Host "Files analyzed: $($psFiles.Count)"
          Write-Host "Total issues found: $($allIssues.Count)"
          Write-Host "Errors: $errorCount"
          Write-Host "Warnings: $warningCount (allowed to pass)"
          Write-Host "Information: $($allIssues.Count - $errorCount - $warningCount) (allowed to pass)"
          
          # Only fail if there are actual errors
          if ($errorCount -gt 0) {
              Write-Host "❌ PSScriptAnalyzer found $errorCount error(s). Build failed."
              exit 1
          } else {
              Write-Host "✅ PSScriptAnalyzer passed! No errors found (warnings and informational issues are allowed)."
              exit 0
          }
          
      - name: Upload PSScriptAnalyzer results
        uses: actions/upload-artifact@v4
        if: always() && steps.changes.outputs.powershell == 'true'
        with:
          name: ps-analyzer-results
          path: PSScriptAnalyzerSettings.psd1
          retention-days: 7

  test:
    name: PowerShell Tests
    needs: lint
    if: github.event.inputs.run_tests != 'false' && needs.lint.outputs.ps-files-changed == 'true'
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        powershell-version: ['7.4', '7.3']
        include:
          - os: windows-latest
            powershell-version: '5.1'
    
    runs-on: ${{ matrix.os }}
    timeout-minutes: 15
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup PowerShell ${{ matrix.powershell-version }}
        uses: microsoft/powershell@v1
        if: matrix.powershell-version != '5.1'
        
      - name: Cache PowerShell modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.local/share/powershell/Modules
            ~/Documents/PowerShell/Modules
            C:\Users\runneradmin\Documents\PowerShell\Modules
          key: ps-modules-${{ runner.os }}-${{ matrix.powershell-version }}-${{ hashFiles('**/RequiredModules.psd1') }}
          restore-keys: |
            ps-modules-${{ runner.os }}-${{ matrix.powershell-version }}-
            
      - name: Install test dependencies
        shell: pwsh
        run: |
          Set-PSRepository -Name PSGallery -InstallationPolicy Trusted
          Install-Module -Name Pester -MinimumVersion 5.0 -Force -Scope CurrentUser
          Install-Module -Name PSScriptAnalyzer -Force -Scope CurrentUser
          
      - name: Run Pester tests
        shell: pwsh
        run: |
          # Configure Pester
          $pesterConfig = [PesterConfiguration]@{
              Run = @{
                  Path = './Tests'
                  PassThru = $true
              }
              Output = @{
                  Verbosity = 'Detailed'
              }
              CodeCoverage = @{
                  Enabled = $true
                  Path = './Scripts/*.ps1'
                  OutputFormat = 'JaCoCo'
                  OutputPath = './coverage.xml'
              }
              TestResult = @{
                  Enabled = $true
                  OutputFormat = 'NUnitXml'
                  OutputPath = './test-results.xml'
              }
          }
          
          # Run tests if test directory exists
          if (Test-Path './Tests') {
              $result = Invoke-Pester -Configuration $pesterConfig
              
              if ($result.FailedCount -gt 0) {
                  Write-Host "❌ $($result.FailedCount) test(s) failed"
                  exit 1
              } else {
                  Write-Host "✅ All $($result.PassedCount) tests passed"
              }
          } else {
              Write-Host "⏭️ No test directory found, skipping tests"
              # Create empty test results for consistency
              '<?xml version="1.0" encoding="UTF-8"?><test-results tests="0" failures="0" not-run="0" time="0" />' | Set-Content -Path './test-results.xml'
          }
          
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always() && hashFiles('test-results.xml') != ''
        with:
          name: test-results-${{ matrix.os }}-ps${{ matrix.powershell-version }}
          path: |
            test-results.xml
            coverage.xml
          retention-days: 30

  security-scan:
    name: Security Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 10
    permissions:
      security-events: write
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Run DevSkim Security Scanner
        uses: microsoft/DevSkim-Action@v1
        with:
          directory-to-scan: .
          
      - name: Upload DevSkim results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: devskim-results.sarif
          category: "DevSkim"

  summary:
    name: Workflow Summary
    if: always()
    needs: [lint, test, security-scan]
    runs-on: ubuntu-latest
    timeout-minutes: 5
    
    steps:
      - name: Generate workflow summary
        run: |
          echo "## PowerShell CI/CD Pipeline Results 🚀" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Lint & Analysis | ${{ needs.lint.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Tests | ${{ needs.test.result == 'success' && '✅ Passed' || needs.test.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security Scan | ${{ needs.security-scan.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Key Features 🔧" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Less strict PSScriptAnalyzer (errors only)" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Multi-OS testing (Ubuntu, Windows, macOS)" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ PowerShell version matrix" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ SARIF security reporting" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Intelligent caching" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Concurrency control" >> $GITHUB_STEP_SUMMARY
