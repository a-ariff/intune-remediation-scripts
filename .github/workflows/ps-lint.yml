# PowerShell Lint and Test Workflow
name: PowerShell CI/CD Pipeline

on:
  push:
    branches: [ "main", "develop" ]
    paths:
      - '**/*.ps1'
      - '**/*.psm1'
      - '**/*.psd1'
      - '.github/workflows/ps-lint.yml'
  pull_request:
    branches: [ "main" ]
    paths:
      - '**/*.ps1'
      - '**/*.psm1'
      - '**/*.psd1'
      - '.github/workflows/ps-lint.yml'
  workflow_dispatch:
    inputs:
      run_tests:
        description: 'Run additional tests'
        required: false
        default: 'true'
        type: boolean

env:
  POWERSHELL_TELEMETRY_OPTOUT: 1

permissions:
  contents: read
  security-events: write
  actions: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint:
    name: PowerShell Lint & Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    outputs:
      ps-files-changed: ${{ steps.changes.outputs.powershell }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Detect PowerShell file changes
        uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            powershell:
              - '**/*.ps1'
              - '**/*.psm1'
              - '**/*.psd1'
              
      - name: Setup PowerShell
        if: steps.changes.outputs.powershell == 'true'
        shell: bash
        run: |
          # Install PowerShell on Ubuntu
          sudo apt-get update
          sudo apt-get install -y wget apt-transport-https software-properties-common
          wget -q "https://packages.microsoft.com/config/ubuntu/$(lsb_release -rs)/packages-microsoft-prod.deb"
          sudo dpkg -i packages-microsoft-prod.deb
          sudo apt-get update
          sudo apt-get install -y powershell
          
      - name: Cache PowerShell modules
        if: steps.changes.outputs.powershell == 'true'
        uses: actions/cache@v4
        with:
          path: ~/.local/share/powershell/Modules
          key: ${{ runner.os }}-powershell-modules-${{ hashFiles('**/*.psd1') }}
          restore-keys: |
            ${{ runner.os }}-powershell-modules-
            
      - name: Install PSScriptAnalyzer
        if: steps.changes.outputs.powershell == 'true'
        shell: pwsh
        run: |
          Set-PSRepository -Name PSGallery -InstallationPolicy Trusted
          Install-Module -Name PSScriptAnalyzer -Force -Scope CurrentUser
          
      - name: Run PSScriptAnalyzer
        if: steps.changes.outputs.powershell == 'true'
        shell: pwsh
        run: |
          $results = Invoke-ScriptAnalyzer -Path . -Recurse -Settings PSGallery -Severity Error,Warning
          if ($results) {
            $results | ForEach-Object {
              Write-Output "::$($_.Severity.ToLower()) file=$($_.ScriptName),line=$($_.Line),col=$($_.Column)::$($_.Message)"
            }
            if ($results | Where-Object Severity -eq 'Error') {
              Write-Output "❌ PSScriptAnalyzer found errors"
              exit 1
            } else {
              Write-Output "⚠️ PSScriptAnalyzer found warnings but no errors"
            }
          } else {
            Write-Output "✅ No PSScriptAnalyzer issues found"
          }
          
      - name: PowerShell syntax check
        if: steps.changes.outputs.powershell == 'true'
        shell: pwsh
        run: |
          $errors = @()
          Get-ChildItem -Path . -Filter '*.ps1' -Recurse | ForEach-Object {
            try {
              $null = [System.Management.Automation.PSParser]::Tokenize((Get-Content $_.FullName -Raw), [ref]$null)
              Write-Output "✅ Syntax OK: $($_.Name)"
            } catch {
              $errors += "❌ Syntax Error in $($_.Name): $($_.Exception.Message)"
              Write-Output "❌ Syntax Error in $($_.Name): $($_.Exception.Message)"
            }
          }
          if ($errors.Count -gt 0) {
            Write-Output "Found $($errors.Count) syntax errors"
            exit 1
          }

  test:
    name: PowerShell Tests
    needs: lint
    if: needs.lint.outputs.ps-files-changed == 'true' && (github.event.inputs.run_tests != 'false')
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        powershell-version: ['7.4', 'latest']
    runs-on: ${{ matrix.os }}
    timeout-minutes: 15
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup PowerShell on Ubuntu/macOS
        if: matrix.os != 'windows-latest'
        shell: bash
        run: |
          if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
            # Install PowerShell on Ubuntu
            sudo apt-get update
            sudo apt-get install -y wget apt-transport-https software-properties-common
            wget -q "https://packages.microsoft.com/config/ubuntu/$(lsb_release -rs)/packages-microsoft-prod.deb"
            sudo dpkg -i packages-microsoft-prod.deb
            sudo apt-get update
            sudo apt-get install -y powershell
          elif [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            # Install PowerShell on macOS
            brew install --cask powershell
          fi
          
      - name: Cache PowerShell modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.local/share/powershell/Modules
            ~/Documents/PowerShell/Modules
            C:\Users\runneradmin\Documents\PowerShell\Modules
          key: ${{ runner.os }}-powershell-modules-${{ matrix.powershell-version }}-${{ hashFiles('**/*.psd1') }}
          restore-keys: |
            ${{ runner.os }}-powershell-modules-${{ matrix.powershell-version }}-
            ${{ runner.os }}-powershell-modules-
            
      - name: Install test dependencies
        shell: pwsh
        run: |
          Set-PSRepository -Name PSGallery -InstallationPolicy Trusted
          Install-Module -Name Pester -MinimumVersion 5.0 -Force -Scope CurrentUser
          Install-Module -Name PSScriptAnalyzer -Force -Scope CurrentUser
          
      - name: Run Pester tests
        shell: pwsh
        run: |
          # Configure Pester
          $config = New-PesterConfiguration
          $config.Run.Path = '.'
          $config.Run.PassThru = $true
          $config.CodeCoverage.Enabled = $true
          $config.CodeCoverage.Path = '**/*.ps1'
          $config.CodeCoverage.OutputFormat = 'JaCoCo'
          $config.CodeCoverage.OutputPath = 'coverage.xml'
          $config.TestResult.Enabled = $true
          $config.TestResult.OutputFormat = 'NUnitXml'
          $config.TestResult.OutputPath = 'test-results.xml'
          $config.Output.Verbosity = 'Detailed'
          
          # Run tests
          $result = Invoke-Pester -Configuration $config
          
          # Output results
          Write-Output "Tests run: $($result.TotalCount)"
          Write-Output "Passed: $($result.PassedCount)"
          Write-Output "Failed: $($result.FailedCount)"
          Write-Output "Skipped: $($result.SkippedCount)"
          
          if ($result.FailedCount -gt 0) {
            Write-Output "❌ $($result.FailedCount) test(s) failed"
            exit 1
          } else {
            Write-Output "✅ All tests passed"
          }
          
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always() && hashFiles('test-results.xml') != ''
        with:
          name: test-results-${{ matrix.os }}-ps${{ matrix.powershell-version }}
          path: |
            test-results.xml
            coverage.xml
          retention-days: 30

  security-scan:
    name: Security Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 10
    permissions:
      security-events: write
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Run DevSkim Security Scanner
        uses: microsoft/DevSkim-Action@v1
        with:
          directory-to-scan: .
          
      - name: Upload DevSkim results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: devskim-results.sarif
          category: "DevSkim"

  summary:
    name: Workflow Summary
    if: always()
    needs: [lint, test, security-scan]
    runs-on: ubuntu-latest
    timeout-minutes: 5
    
    steps:
      - name: Generate workflow summary
        run: |
          echo "## PowerShell CI/CD Pipeline Results 🚀" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Lint & Analysis | ${{ needs.lint.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Tests | ${{ needs.test.result == 'success' && '✅ Passed' || needs.test.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security Scan | ${{ needs.security-scan.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Key Features 🔧" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Manual PowerShell setup (no external actions)" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Multi-OS testing (Ubuntu, Windows, macOS)" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ PowerShell version matrix" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ SARIF security reporting" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Intelligent caching" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Concurrency control" >> $GITHUB_STEP_SUMMARY
