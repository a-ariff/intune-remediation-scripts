# PowerShell Lint and Test Workflow (2025 Enhanced)
# Comprehensive PowerShell testing with modern GitHub Actions practices
name: PowerShell CI/CD Pipeline

on:
  push:
    branches: [ "main", "develop" ]
    paths:
      - '**/*.ps1'
      - '**/*.psm1'
      - '**/*.psd1'
      - '.github/workflows/ps-lint.yml'
  pull_request:
    branches: [ "main" ]
    paths:
      - '**/*.ps1'
      - '**/*.psm1'
      - '**/*.psd1'
      - '.github/workflows/ps-lint.yml'
  workflow_dispatch:
    inputs:
      run_tests:
        description: 'Run additional tests'
        required: false
        default: 'true'
        type: boolean

env:
  POWERSHELL_TELEMETRY_OPTOUT: 1

permissions:
  contents: read
  security-events: write
  actions: read
  id-token: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint:
    name: PowerShell Lint & Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    outputs:
      ps-files-changed: ${{ steps.changes.outputs.powershell }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Detect PowerShell file changes
        uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            powershell:
              - '**/*.ps1'
              - '**/*.psm1'
              - '**/*.psd1'
      
      # Setup PowerShell using the official actions/setup-powershell action
      - name: Setup PowerShell
        uses: actions/setup-powershell@v1
        if: steps.changes.outputs.powershell == 'true'
        
      - name: Cache PSScriptAnalyzer module
        uses: actions/cache@v4
        if: steps.changes.outputs.powershell == 'true'
        with:
          path: ~/.local/share/powershell/Modules
          key: ${{ runner.os }}-powershell-modules-${{ hashFiles('**/*.ps1', '**/*.psm1', '**/*.psd1') }}
          restore-keys: |
            ${{ runner.os }}-powershell-modules-
            
      - name: Install PSScriptAnalyzer
        if: steps.changes.outputs.powershell == 'true'
        shell: pwsh
        run: |
          Set-PSRepository -Name PSGallery -InstallationPolicy Trusted
          Install-Module -Name PSScriptAnalyzer -Force -Scope CurrentUser
          
      - name: Run PSScriptAnalyzer (Errors Only)
        if: steps.changes.outputs.powershell == 'true'
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          
          Write-Host "üîç Running PSScriptAnalyzer (Errors Only Mode)" -ForegroundColor Green
          
          $scriptFiles = Get-ChildItem -Path . -Include *.ps1, *.psm1, *.psd1 -Recurse | Where-Object {
            $_.FullName -notmatch '\\.git\\'
          }
          
          if ($scriptFiles.Count -eq 0) {
            Write-Host "No PowerShell files found to analyze." -ForegroundColor Yellow
            exit 0
          }
          
          Write-Host "Found $($scriptFiles.Count) PowerShell files to analyze" -ForegroundColor Cyan
          
          $allIssues = @()
          $errorCount = 0
          
          foreach ($file in $scriptFiles) {
            Write-Host "Analyzing: $($file.Name)" -ForegroundColor Gray
            
            $issues = Invoke-ScriptAnalyzer -Path $file.FullName -Severity Error
            
            if ($issues) {
              $allIssues += $issues
              $errorCount += $issues.Count
              
              Write-Host "‚ùå Found $($issues.Count) error(s) in $($file.Name)" -ForegroundColor Red
              foreach ($issue in $issues) {
                Write-Host "  Line $($issue.Line): $($issue.Message)" -ForegroundColor Red
              }
            } else {
              Write-Host "‚úÖ $($file.Name) - No errors" -ForegroundColor Green
            }
          }
          
          Write-Host "`nüìä Analysis Summary:" -ForegroundColor Cyan
          Write-Host "Files analyzed: $($scriptFiles.Count)" -ForegroundColor White
          Write-Host "Total errors: $errorCount" -ForegroundColor White
          
          if ($errorCount -gt 0) {
            Write-Host "`n‚ùå PSScriptAnalyzer found $errorCount error(s). Please fix these issues." -ForegroundColor Red
            
            # Export detailed results for potential use in other steps
            $allIssues | ConvertTo-Json -Depth 5 | Out-File -FilePath 'pssa-results.json' -Encoding utf8
            
            exit 1
          } else {
            Write-Host "`n‚úÖ All PowerShell files passed PSScriptAnalyzer analysis!" -ForegroundColor Green
          }

  test:
    name: PowerShell Tests
    if: github.event.inputs.run_tests != 'false' && needs.lint.outputs.ps-files-changed == 'true'
    needs: lint
    timeout-minutes: 15
    
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        powershell-version: ['7.4', '7.3']
        exclude:
          # Reduce matrix size for faster execution
          - os: macos-latest
            powershell-version: '7.3'
    
    runs-on: ${{ matrix.os }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup PowerShell ${{ matrix.powershell-version }}
        uses: actions/setup-powershell@v1
        with:
          powershell-version: ${{ matrix.powershell-version }}
          
      - name: Cache PowerShell modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.local/share/powershell/Modules
            ~/AppData/Local/powershell/Modules
            ~/.cache/powershell/Modules
          key: ${{ runner.os }}-ps${{ matrix.powershell-version }}-modules-${{ hashFiles('**/*.ps1', '**/*.psm1', '**/*.psd1') }}
          restore-keys: |
            ${{ runner.os }}-ps${{ matrix.powershell-version }}-modules-
            
      - name: Install test dependencies
        shell: pwsh
        run: |
          Set-PSRepository -Name PSGallery -InstallationPolicy Trusted
          Install-Module -Name Pester -MinimumVersion 5.0 -Force -Scope CurrentUser
          Install-Module -Name PSScriptAnalyzer -Force -Scope CurrentUser
          
      - name: Run PowerShell tests
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          
          Write-Host "üß™ Running PowerShell Tests" -ForegroundColor Green
          Write-Host "OS: ${{ matrix.os }}" -ForegroundColor Cyan
          Write-Host "PowerShell Version: ${{ matrix.powershell-version }}" -ForegroundColor Cyan
          
          # Basic syntax validation for all PS files
          $scriptFiles = Get-ChildItem -Path . -Include *.ps1, *.psm1, *.psd1 -Recurse | Where-Object {
            $_.FullName -notmatch '\\.git\\'
          }
          
          Write-Host "`nValidating PowerShell syntax for $($scriptFiles.Count) files..." -ForegroundColor Yellow
          
          $syntaxErrors = 0
          foreach ($file in $scriptFiles) {
            try {
              $null = [System.Management.Automation.PSParser]::Tokenize((Get-Content $file.FullName -Raw), [ref]$null)
              Write-Host "‚úÖ $($file.Name) - Syntax OK" -ForegroundColor Green
            } catch {
              Write-Host "‚ùå $($file.Name) - Syntax Error: $($_.Exception.Message)" -ForegroundColor Red
              $syntaxErrors++
            }
          }
          
          if ($syntaxErrors -gt 0) {
            Write-Host "`n‚ùå Found $syntaxErrors syntax error(s)" -ForegroundColor Red
            exit 1
          }
          
          # Look for and run any Pester tests
          $testFiles = Get-ChildItem -Path . -Filter '*.Tests.ps1' -Recurse
          
          if ($testFiles.Count -gt 0) {
            Write-Host "`nüß™ Running Pester tests..." -ForegroundColor Yellow
            
            $testResult = Invoke-Pester -Path $testFiles.FullName -OutputFormat NUnitXml -OutputFile 'test-results.xml' -PassThru
            
            Write-Host "`nüìä Test Results:" -ForegroundColor Cyan
            Write-Host "Total tests: $($testResult.TotalCount)" -ForegroundColor White
            Write-Host "Passed: $($testResult.PassedCount)" -ForegroundColor Green
            Write-Host "Failed: $($testResult.FailedCount)" -ForegroundColor Red
            Write-Host "Skipped: $($testResult.SkippedCount)" -ForegroundColor Yellow
            
            if ($testResult.FailedCount -gt 0) {
              Write-Host "`n‚ùå Some tests failed" -ForegroundColor Red
              exit 1
            }
          } else {
            Write-Host "`n‚ö†Ô∏è  No Pester test files found (*.Tests.ps1)" -ForegroundColor Yellow
          }
          
          Write-Host "`n‚úÖ All PowerShell tests completed successfully!" -ForegroundColor Green
          
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always() && hashFiles('test-results.xml') != ''
        with:
          name: test-results-${{ matrix.os }}-ps${{ matrix.powershell-version }}
          path: |
            test-results.xml
            coverage.xml
          retention-days: 30

  security-scan:
    name: Security Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 10
    permissions:
      security-events: write
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Run DevSkim Security Scanner
        uses: microsoft/DevSkim-Action@v1
        with:
          directory-to-scan: .
          
      - name: Upload DevSkim results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: devskim-results.sarif
          category: "DevSkim"

  summary:
    name: Workflow Summary
    if: always()
    needs: [lint, test, security-scan]
    runs-on: ubuntu-latest
    timeout-minutes: 5
    
    steps:
      - name: Generate workflow summary
        run: |
          echo "## PowerShell CI/CD Pipeline Results üöÄ" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Lint & Analysis | ${{ needs.lint.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Tests | ${{ needs.test.result == 'success' && '‚úÖ Passed' || needs.test.result == 'skipped' && '‚è≠Ô∏è Skipped' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security Scan | ${{ needs.security-scan.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Key Features üîß" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Less strict PSScriptAnalyzer (errors only)" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Multi-OS testing (Ubuntu, Windows, macOS)" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ PowerShell version matrix" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ SARIF security reporting" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Intelligent caching" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Concurrency control" >> $GITHUB_STEP_SUMMARY
