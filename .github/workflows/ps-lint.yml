# PowerShell Lint and Test Workflow (2025 Enhanced)
# Comprehensive PowerShell testing with modern GitHub Actions practices

name: PowerShell CI/CD Pipeline

on:
  push:
    branches: [ "main", "develop" ]
    paths:
      - '**/*.ps1'
      - '**/*.psm1'
      - '**/*.psd1'
      - '.github/workflows/ps-lint.yml'
  pull_request:
    branches: [ "main" ]
    paths:
      - '**/*.ps1'
      - '**/*.psm1'
      - '**/*.psd1'
      - '.github/workflows/ps-lint.yml'
  workflow_dispatch:
    inputs:
      run_tests:
        description: 'Run additional tests'
        required: false
        default: 'true'
        type: boolean

env:
  POWERSHELL_TELEMETRY_OPTOUT: 1

permissions:
  contents: read
  security-events: write
  actions: read
  id-token: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint:
    name: PowerShell Lint & Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    outputs:
      ps-files-changed: ${{ steps.changes.outputs.powershell }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Detect PowerShell file changes
        uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            powershell:
              - '**/*.ps1'
              - '**/*.psm1'
              - '**/*.psd1'
      
      - name: Setup PowerShell
        if: steps.changes.outputs.powershell == 'true'
        shell: bash
        run: |
          # Install PowerShell 7.x on Ubuntu
          sudo snap install powershell --classic
          
      - name: Cache PowerShell modules
        if: steps.changes.outputs.powershell == 'true'
        uses: actions/cache@v4
        with:
          path: |
            ~/.local/share/powershell/Modules
            /usr/local/share/powershell/Modules
          key: ${{ runner.os }}-powershell-modules-${{ hashFiles('**/*.psd1', '**/*.psm1') }}
          restore-keys: |
            ${{ runner.os }}-powershell-modules-
      
      - name: Install PSScriptAnalyzer
        if: steps.changes.outputs.powershell == 'true'
        shell: pwsh
        run: |
          Set-PSRepository PSGallery -InstallationPolicy Trusted
          Install-Module -Name PSScriptAnalyzer -Force -Scope CurrentUser
          Install-Module -Name Pester -Force -Scope CurrentUser -SkipPublisherCheck
          Get-Module -ListAvailable PSScriptAnalyzer, Pester
          
      - name: Run PSScriptAnalyzer
        if: steps.changes.outputs.powershell == 'true'
        shell: pwsh
        run: |
          $analysisResults = @()
          $psFiles = Get-ChildItem -Path . -Include "*.ps1", "*.psm1", "*.psd1" -Recurse
          
          foreach ($file in $psFiles) {
              Write-Host "Analyzing: $($file.FullName)"
              $results = Invoke-ScriptAnalyzer -Path $file.FullName -Severity @('Error', 'Warning', 'Information') -Recurse
              $analysisResults += $results
          }
          
          if ($analysisResults.Count -gt 0) {
              Write-Host "PSScriptAnalyzer found $($analysisResults.Count) issues:"
              $analysisResults | Format-Table -AutoSize
              
              $errorCount = ($analysisResults | Where-Object Severity -eq 'Error').Count
              $warningCount = ($analysisResults | Where-Object Severity -eq 'Warning').Count
              $infoCount = ($analysisResults | Where-Object Severity -eq 'Information').Count
              
              Write-Host "Summary: $errorCount errors, $warningCount warnings, $infoCount informational"
              
              if ($errorCount -gt 0) {
                  Write-Error "PSScriptAnalyzer found $errorCount error(s). Please fix before proceeding."
                  exit 1
              }
          } else {
              Write-Host "✅ No PSScriptAnalyzer issues found!"
          }
          
      - name: Upload analysis results
        if: always() && steps.changes.outputs.powershell == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: pssa-results
          path: |
            **/*.ps1
            **/*.psm1
            **/*.psd1
          retention-days: 30

  test:
    name: PowerShell Tests
    needs: lint
    if: needs.lint.outputs.ps-files-changed == 'true' && (github.event.inputs.run_tests == 'true' || github.event.inputs.run_tests == '')
    timeout-minutes: 15
    
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        powershell-version: ['7.2', '7.3', '7.4']
        exclude:
          - os: macos-latest
            powershell-version: '7.2'
    
    runs-on: ${{ matrix.os }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Setup PowerShell on Ubuntu/macOS
        if: matrix.os != 'windows-latest'
        shell: bash
        run: |
          if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
            sudo snap install powershell --classic
          elif [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            brew install --cask powershell
          fi
          
      - name: Cache PowerShell modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.local/share/powershell/Modules
            ~/Documents/PowerShell/Modules
            /usr/local/share/powershell/Modules
            C:\Users\runneradmin\Documents\PowerShell\Modules
          key: ${{ runner.os }}-ps${{ matrix.powershell-version }}-modules-${{ hashFiles('**/*.psd1', '**/*.psm1') }}
          restore-keys: |
            ${{ runner.os }}-ps${{ matrix.powershell-version }}-modules-
      
      - name: Install test dependencies
        shell: pwsh
        run: |
          Set-PSRepository PSGallery -InstallationPolicy Trusted
          Install-Module -Name Pester -Force -Scope CurrentUser -SkipPublisherCheck -MinimumVersion 5.0
          Install-Module -Name PSScriptAnalyzer -Force -Scope CurrentUser
          Get-Module -ListAvailable Pester, PSScriptAnalyzer
          
      - name: Run Pester tests
        shell: pwsh
        run: |
          $pesterConfig = New-PesterConfiguration
          $pesterConfig.Run.Path = './'
          $pesterConfig.TestResult.Enabled = $true
          $pesterConfig.TestResult.OutputPath = 'test-results.xml'
          $pesterConfig.TestResult.OutputFormat = 'JUnit'
          $pesterConfig.CodeCoverage.Enabled = $true
          $pesterConfig.CodeCoverage.OutputPath = 'coverage.xml'
          $pesterConfig.CodeCoverage.OutputFormat = 'JaCoCo'
          $pesterConfig.Output.Verbosity = 'Detailed'
          
          $psFiles = Get-ChildItem -Path . -Include "*.ps1" -Recurse | Where-Object { $_.Name -notlike "*.Tests.ps1" }
          if ($psFiles.Count -gt 0) {
              $pesterConfig.CodeCoverage.Path = $psFiles.FullName
          }
          
          Invoke-Pester -Configuration $pesterConfig
          
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always() && hashFiles('test-results.xml') != ''
        with:
          name: test-results-${{ matrix.os }}-ps${{ matrix.powershell-version }}
          path: |
            test-results.xml
            coverage.xml
          retention-days: 30

  security-scan:
    name: Security Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 10
    permissions:
      security-events: write
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Run DevSkim Security Scanner
        uses: microsoft/DevSkim-Action@v1
        with:
          directory-to-scan: .
          
      - name: Upload DevSkim results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: devskim-results.sarif
          category: "DevSkim"

  summary:
    name: Workflow Summary
    if: always()
    needs: [lint, test, security-scan]
    runs-on: ubuntu-latest
    timeout-minutes: 5
    
    steps:
      - name: Generate workflow summary
        run: |
          echo "## PowerShell CI/CD Pipeline Results 🚀" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Lint & Analysis | ${{ needs.lint.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Tests | ${{ needs.test.result == 'success' && '✅ Passed' || needs.test.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security Scan | ${{ needs.security-scan.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Key Features 🔧" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Enhanced PSScriptAnalyzer rules" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Multi-OS testing (Ubuntu, Windows, macOS)" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ PowerShell version matrix" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ SARIF security reporting" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Intelligent caching" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Concurrency control" >> $GITHUB_STEP_SUMMARY
